
//=========================================================================================
//              EC20模组驱动
//      EC20驱动的AT指令和数据收发基于UART通信机制
//      底层接口： （1）uart_1_frame_callback():   在中断中执行，可直接处理frame1
//                （2）F_uart1_get_newframe + frame2_uart3rx ： 查询标志位并处理（拷贝帧）低速处理
//      顶层接口： TCP层
//                向顶层发送信号
//      EC20驱动架构：
//                   TCP层接口
//                   EC20数据抽象层：EC20属性 + 多路socket属性                      
//                   AT指令序列：(1)准备多套指令序列
//                              (2)指令序列执行状态机
//                              (3)根据EC20数据抽象层
//                   AT指令处理状态机：  发送
//                                      接收-->是本指令执行结果-->返回ok
//                                                  |-> 其他信息-->接收到新数据 --> 触发新指令序列（产生一个信号）   
//                                                             \->异常信息--> 触发新指令序列
//                   超时处理机制、复位机制、电源管理机制
//      修改历史：
//      2019.8.13前：重构EC20，从以前版本迁移过来,重构socket接口
//           8.14： 架构调整，EC20等网络驱动中使用指针来处理socket,实现同一个socket，可对应多网络设备驱动
//                  对EC20的宏定义NUM_SOCKET_EC20可真正起设定作用，外部控制使用多少路EC20的socket     
//                  增加EC20_init，对EC20中的socket结构体指针进行初始化，避免使用未初始化的指针
//                  修改对 如"0, CLOSED"的socket关闭操作的判断，为此修改了mystring，增加read_above
//                  待完善：F_sack 和 C_sack 放入socket中或者EC20中    
//=========================================================================================

#ifndef EC20_H
#define EC20_H

    #include "m26.h"

    #include "typedef.h"
    #include "socket.h"
    //====================================================================
    //  依赖：
    //  (1)uart数据收发
    //  (2)com接收机制： 接收字节-->超时-->保存到frame1_uart1rx中
    //                  查询标志位：F_uart1_get_frame1 来判断是否接收到了EC20返回的数据
    //  (3)库依赖：      typedef.h  : 基础数据类型的定义
    //                  fifo.h     : 队列
    //                  frame.h    ：帧 发送数据和接收数据都是以帧为单位的   
    //                                             
    //====================================================================
    //---------
    #define EC20_put_char            uart_1_put_char
    #define EC20_put_array           uart_1_put_array
    #define EC20_put_string          uart_1_put_string
    
//============================================================================================
//          数据类型定义
//============================================================================================
        #define NUM_SOCKET_EC20          6       //EC20共6路socket

        
    //------------ EC20结构体 ---------------------------
        typedef struct{
            uint8 Enable;
            uint8 S_net;                        //网络状态：掉线、联网中、已连接    
            uint8 csq;                          //信号值.
            type_TCPclient* socket[NUM_SOCKET_EC20];  //socket
            //EC20内部状态
        }type_EC20;

//==============================================================================================
//      对外变量声明
//==============================================================================================
    
    extern type_EC20 EC20;
//=============================================================================================
//
//=============================================================================================
    void EC20_init(void);
    void func_EC20(void);

    // __weak socket0_rx_callback(void)
#endif

